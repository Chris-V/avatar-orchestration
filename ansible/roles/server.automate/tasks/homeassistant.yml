- name: Install ansible requirements
  community.general.pacman:
    name:
      - python-requests
    state: "present"

- name: Generate home-assistant keys for GitHub
  block:
    - name: Generate key
      become: yes
      become_user: homeassistant
      community.crypto.openssh_keypair:
        path: "{{ homeassistant_config_key_path }}"
        type: "rsa"
        size: 4096
        state: "present"
        force: "{{ homeassistant_recreate_config_key | bool }}"
        owner: "homeassistant"
        group: "homeassistant"
    - name: Read public key
      register: "public_deploy_key"
      ansible.builtin.slurp:
        src: "{{ homeassistant_config_key_path }}.pub"
    - name: Upload key to GitHub
      community.general.github_deploy_key:
        name: "automate-homeassistant"
        owner: "{{ homeassistant_config_owner }}"
        repo: "{{ homeassistant_config_repo }}"
        token: "{{ github_token }}"
        read_only: yes
        force: "{{ homeassistant_recreate_config_key | bool }}"
        key: "{{ public_deploy_key['content'] | b64decode }}"
        state: "present"

- name: Create Home-Assistant appdata directories
  loop:
    - { path: "", mode: "u=rwx,g=rx,o=" }
    - { path: "config/", mode: "u=rwx,g=rx,o=" }
    - { path: "ssh/", mode: "u=rwx,go=" }
    - { path: "docker/", mode: "u=rwx,g=rx,o=", owner: "root" }
  ansible.builtin.file: &create_appdata_dir
    path: "{{ docker_appdata_dir }}/home-assistant/{{ item.path }}"
    state: "directory"
    owner: "{{ item.owner | default('homeassistant') }}"
    group: "{{ item.group | default('homeassistant') }}"
    mode: "{{ item.mode }}"

- name: Pull home-assistant configuration
  become: yes
  become_user: homeassistant
  ansible.builtin.git:
    dest: "{{ docker_appdata_dir }}/home-assistant/config"
    repo: "git@github.com:{{ homeassistant_config_owner }}/{{ homeassistant_config_repo }}.git"
    version: "master"
    key_file: "{{ homeassistant_config_key_path }}"
    accept_hostkey: yes
    umask: "0027"

- name: Check HACS presence
  register: hacs_cloned
  ansible.builtin.stat:
    path: "{{ docker_appdata_dir }}/home-assistant/config/custom_components/hacs"
- name: Configure HACS
  when: not hacs_cloned.stat.exists
  block:
    - name: Clone HACS
      become: yes
      become_user: homeassistant
      ansible.builtin.git:
        dest: &hacs_tmp_path "/tmp/hacs"
        repo: "{{ homeassistant_hacs_repo }}"
        version: "master"
        key_file: "{{ homeassistant_config_key_path }}"
        accept_hostkey: yes
        depth: 1
        umask: "0027"
    - name: Install HACS
      ansible.builtin.copy:
        src: "/tmp/hacs/custom_components/hacs"
        dest: "{{ docker_appdata_dir }}/home-assistant/config/custom_components"
        remote_src: yes
        owner: "homeassistant"
        group: "homeassistant"
        mode: "preserve"
    - name: Cleanup HACS clone
      ansible.builtin.file:
        path: *hacs_tmp_path
        state: "absent"

- name: Create additional Home-Assistant directories # Must be done after initial clone
  loop:
    - { path: "config/.secrets", mode: "u=rwx,go=" }
    - { path: "config/www/secrets", mode: "u=rwx,go=" }
  ansible.builtin.file: *create_appdata_dir

- name: Copy Home-Assistant files
  loop:
    - { path: "docker/run", mode: "u=rwx,g=r,o=", owner: "root" }
    - { host_file: yes, path: "config/.secrets/gcp.json", mode: "u=r,go=" }
    - { host_file: yes, path: "config/.secrets/id_homeassistant", mode: "u=r,go=" }
    - { host_file: yes, path: "config/.secrets/id_router_homeassistant", mode: "u=r,go=" }
    - { host_file: yes, path: "config/.secrets/id_router_homeassistant.pub", mode: "u=r,g=r,o=" }
    - { host_file: yes, path: "config/www/secrets/chris.webp", mode: "ug=rw,o=" }
    - { host_file: yes, path: "config/www/secrets/karine.webp", mode: "ug=rw,o=" }
  ansible.builtin.copy:
    src: "{{ item.host_file | default(False) | ternary(host_files, '') }}appdata/home-assistant/{{ item.path }}"
    dest: "{{ docker_appdata_dir }}/home-assistant/{{ item.path }}"
    owner: "{{ item.owner | default('homeassistant') }}"
    group: "{{ item.group | default('homeassistant') }}"
    mode: "{{ item.mode }}"

- name: Copy Home-Assistant templates
  loop:
    - { path: "config/.secrets/ssh_config", mode: "u=rw,go=" }
    - { path: "config/.secrets/ssh_known_hosts", mode: "u=rw,go=" }
    - { host_file: yes, path: "config/.secrets/id_homeassistant.pub", mode: "u=r,g=r,o=" }
    - { host_file: yes, path: "config/secrets.yaml", mode: "u=r,go=" }
  ansible.builtin.template:
    src: "{{ item.host_file | default(False) | ternary(host_files, '') }}appdata/home-assistant/{{ item.path }}.j2"
    dest: "{{ docker_appdata_dir }}/home-assistant/{{ item.path }}"
    owner: "homeassistant"
    group: "homeassistant"
    mode: "{{ item.mode }}"
