- name: "Create app directories"
  loop:
    - { path: "{{ docker_apps_dir }}" }
    - { path: "{{ docker_appdata_dir }}" }
    - { path: "{{ docker_appdata_dir }}/fragments" }
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "directory"
    owner: "root"
    group: "docker"
    mode: 0755

- name: "Create networks"
  loop:
    - { name: "automate", subnet: "{{ docker_net_automate }}" }
    - { name: "backups" }
    - { name: "ups" }
  include_role:
    name: "container"
    tasks_from: "network-fragment"
  vars:
    dest: "{{ docker_appdata_dir }}/fragments/{{ item.name }}.network.yml"
    interface_name: "{{ item.name }}"
    subnet: "{{ item.subnet | default }}"

- name: Configure APC
  block:
    - name: Create APC directories
      loop:
        - { path: "", mode: "u=rwx,g=rx,o=" }
      ansible.builtin.file:
        path: "{{ docker_appdata_dir }}/apcupsd/{{ item.path }}"
        state: "directory"
        owner: "docker-appdata"
        group: "docker-appdata"
        mode: "{{ item.mode }}"
    - name: Copy APC files
      loop:
        - { path: "apcupsd.conf", mode: "u=rw,g=r,o=" }
      ansible.builtin.copy:
        src: "appdata/apcupsd/{{ item.path }}"
        dest: "{{ docker_appdata_dir }}/apcupsd/{{ item.path }}"
        owner: "docker-appdata"
        group: "docker-appdata"
        mode: "{{ item.mode }}"

- name: Configure appdata-backup
  block:
    - name: Create appdata-backup directories
      loop:
        - { path: "", mode: "u=rwx,g=rx,o=" }
      ansible.builtin.file:
        path: "{{ docker_appdata_dir }}/appdata-backup/{{ item.path }}"
        state: "directory"
        owner: "docker-appdata"
        group: "docker-appdata"
        mode: "{{ item.mode }}"
    - name: Copy appdata-backup files
      loop:
        - { path: "backup_acl.sh", mode: "u=rwx,g=rx,o=" }
        - { path: "filters.txt", mode: "u=rw,go=" }
        - { host_file: yes, path: "gcs_auth.json", mode: "u=r,go=" }
      ansible.builtin.copy:
        src: "{{ item.host_file | default(False) | ternary(host_files, '') }}appdata/appdata-backup/{{ item.path }}"
        dest: "{{ docker_appdata_dir }}/appdata-backup/{{ item.path }}"
        owner: "docker-appdata"
        group: "docker-appdata"
        mode: "{{ item.mode }}"
    - name: Copy appdata-backup templates
      loop:
        - { path: "rclone.conf", mode: "u=rw,go=" }
      ansible.builtin.template:
        src: "appdata/appdata-backup/{{ item.path }}.j2"
        dest: "{{ docker_appdata_dir }}/appdata-backup/{{ item.path }}"
        owner: "docker-appdata"
        group: "docker-appdata"
        mode: "{{ item.mode }}"

- name: Configure Mosquitto
  block:
    - name: Create Mosquitto directories
      loop:
        - { path: "", mode: "u=rwx,g=rx,o=" }
        - { path: "config/", mode: "u=rwx,g=rx,o=" }
        - { path: "data/", mode: "u=rwx,g=rx,o=" }
      ansible.builtin.file:
        path: "{{ docker_appdata_dir }}/mosquitto/{{ item.path }}"
        state: "directory"
        owner: "mosquitto"
        group: "mosquitto"
        mode: "{{ item.mode }}"
    - name: Copy Mosquitto files
      loop:
        - { path: "config/mosquitto.conf", mode: "u=rw,g=r,o=" }
        - { host_file: yes, path: "config/acl", mode: "u=r,go=" }
        - { host_file: yes, path: "config/passwords", mode: "u=r,go=" }
      ansible.builtin.copy:
        src: "{{ item.host_file | default(False) | ternary(host_files, '') }}appdata/mosquitto/{{ item.path }}"
        dest: "{{ docker_appdata_dir }}/mosquitto/{{ item.path }}"
        owner: "mosquitto"
        group: "mosquitto"
        mode: "{{ item.mode }}"

- name: Configure OpenZWave
  block:
    - name: Create OpenZWave directories
      loop:
        - { path: "", mode: "u=rwx,g=rx,o=" }
      ansible.builtin.file:
        path: "{{ docker_appdata_dir }}/openzwave/{{ item.path }}"
        state: "directory"
        owner: "root"
        group: "docker"
        mode: "{{ item.mode }}"

- name: Copy docker compose
  ansible.builtin.template:
    src: "docker/docker-compose.yml.j2"
    dest: "{{ docker_apps_dir }}/docker-compose.yml"
    owner: "root"
    group: "docker"
    mode: 0640
    validate: "docker-compose -f %s config"
