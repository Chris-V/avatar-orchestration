# Fetch existing (or not!) checksum

- name: Lookup remote elastic checksum file
  register: elastic_remote_checksum_file
  ansible.builtin.stat:
    path: &remote_checksum_file "{{ docker_appdata_dir }}/elasticsearch/checksum"
    get_attributes: no
    get_checksum: no
    get_mime: no

- name: Set default remote elastic checksum fact
  when: not elastic_remote_checksum_file.stat.exists
  ansible.builtin.set_fact:
    elastic_remote_checksum: "0"

- name: Set stored remote elastic checksum
  when: elastic_remote_checksum_file.stat.exists
  block:
    - name: Read remote elastic checksum file
      register: elastic_remote_checksum_b64
      ansible.builtin.slurp:
        src: *remote_checksum_file
    - name: Update remote elastic checksum fact
      ansible.builtin.set_fact:
        elastic_remote_checksum: "{{ elastic_remote_checksum_b64.content | b64decode }}"

# Calculate expected checksum

- name: Set local elastic checksum
  become: no
  delegate_to: localhost
  block:
    - name: Calculate elastic checksum
      with_filetree:
        - "../files/appdata/elasticsearch"
        - "../templates/appdata/elasticsearch"
      when: item.state == 'file'
      register: "elastic_local_files"
      ansible.builtin.stat:
        path: "{{ item.src }}"
        checksum_algorithm: "sha512"
        get_attributes: no
        get_mime: no
    - name: Update local elastic checksum fact
      ansible.builtin.set_fact:
        elastic_local_checksum: |
          {{ elastic | hash('sha512') }}
          {{ elastic_local_files.results | map(attribute='stat.checksum') | join() }}

# Update elastic settings if appropriate

- name: Update elastic configurations
  when: elastic_remote_checksum != elastic_local_checksum
  block:
    - name: Start elasticsearch container
      community.docker.docker_compose:
        project_src: "{{ docker_apps_dir }}"
        services:
          - "elasticsearch"
        state: "present"

    - name: Copy configuration scripts
      loop:
        - "init"
        - "init_config"
      ansible.builtin.template:
        src: "appdata/elasticsearch/{{ item }}.sh.j2"
        dest: "{{ docker_appdata_dir }}/elasticsearch/{{ item }}.sh"
        owner: "root"
        group: "root"
        mode: "700"
    - name: Copy configuration scripts
      ansible.builtin.copy:
        src: "appdata/elasticsearch/wait-for-it.sh"
        dest: "{{ docker_appdata_dir }}/elasticsearch/wait-for-it.sh"
        owner: "root"
        group: "root"
        mode: "700"
    - name: Execute configuration script
      register: container_output
      community.docker.docker_container:
        command: "/elastic/init.sh"
        cleanup: yes
        detach: no
        keep_volumes: no
        image: "alpine:3.9"
        name: "elasticsearch_init"
        output_logs: yes
        networks:
          - name: "elastic"
        networks_cli_compatible: yes
        state: "started"
        volumes:
          - "{{ docker_appdata_dir }}/elasticsearch:/elastic:ro"
    - ansible.builtin.debug:
        msg: "{{ container_output.ansible_facts.docker_container.Output }}"

    - name: Cleanup configuration script
      ansible.builtin.file:
        state: "absent"
        path: "{{ docker_appdata_dir }}/elasticsearch/init_config.sh"
    - name: Update remote checksum file
      vars:
        content: "{{ elastic_local_checksum }}"
      ansible.builtin.template:
        src: "any_content.j2"
        dest: *remote_checksum_file
        owner: "root"
        group: "root"
        mode: 0640
