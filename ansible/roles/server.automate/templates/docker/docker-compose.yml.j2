version: "3.7"

networks:
  automate:
    external:
      name: "automate"
  backups:
    external:
      name: "backups"
  ups:
    external:
      name: "ups"

services:
  home-assistant:
    container_name: home-assistant
    image: "homeassistant/home-assistant:2020.12.5"
    restart: "unless-stopped"
    devices:
      - "/dev/zigbee:/dev/zigbee"
    environment:
      TZ: "{{ timezone }}"
      PUID: "{{ homeassistant_uid }}"
      PGID: "{{ homeassistant_gid }}"
      UMASK: "007"
      PACKAGES: "iputils"
    labels:
      avatar.subdomain: "home-assistant"
      traefik.docker.network: "automate"
      traefik.http.services.home-assistant.loadbalancer.server.port: 8123
      traefik.http.routers.home-assistant.entryPoints: "https"
    networks:
      automate:
      ups:
    ports:
      - "1400:1400" # Sonos
      - "1443:1443" # Sonos SSL
    volumes:
      - "{{ docker_appdata_dir }}/home-assistant/config:{{ homeassistant_container_config_path }}"
      - "{{ docker_appdata_dir }}/home-assistant/docker/run:/etc/services.d/home-assistant/run"

  mosquitto:
    container_name: mosquitto
    image: "eclipse-mosquitto:2"
    restart: "unless-stopped"
    user: '{{ mosquitto_uid }}:{{ mosquitto_gid }}'
    environment:
      TZ: "{{ timezone }}"
    labels:
      avatar.subdomain: "mqtt"
      traefik.docker.network: "automate"
      traefik.tcp.services.mosquitto.loadbalancer.server.port: 1883
      traefik.tcp.routers.mosquitto.entryPoints: "mqtts"
      traefik.tcp.routers.mosquitto.rule: "HostSNI(`mqtt.{{ domain_name }}`)"
      traefik.tcp.routers.mosquitto.tls: "true"
      traefik.tcp.routers.mosquitto.tls.certresolver: "default"
      traefik.tcp.routers.mosquitto.tls.domains[0].main: "{{ domain_name }}"
      traefik.tcp.routers.mosquitto.tls.domains[0].sans: "*.{{ domain_name }}"
    networks:
      automate:
    ports:
      - "127.0.0.1:1883:1883"
    volumes:
      - "{{ docker_appdata_dir }}/mosquitto/config:/mosquitto/config"
      - "{{ docker_appdata_dir }}/mosquitto/data:/mosquitto/data"

  openzwave:
    container_name: openzwave
    image: "openzwave/ozwdaemon:allinone-latest"
    restart: "unless-stopped"
    depends_on:
      - "mosquitto"
    devices:
      - "{{ openzwave_usb_path }}:{{ openzwave_usb_path }}"
    environment:
      TZ: "{{ timezone }}"
      MQTT_SERVER: "{{ openzwave_mqtt_server }}"
      MQTT_PORT: {{ openzwave_mqtt_port }}
      MQTT_TLS: "{{ openzwave_mqtt_tls }}"
      MQTT_USERNAME: "{{ openzwave_mqtt_username }}"
      MQTT_PASSWORD: "{{ openzwave_mqtt_password }}"
      USB_PATH: "{{ openzwave_usb_path }}"
      OZW_AUTH_KEY: "{{ openzwave_auth_key }}"
      OZW_NETWORK_KEY: "{{ openzwave_network_key }}"
      QT_LOGGING_RULES: "*.debug=false"
    labels:
      avatar.subdomain: "openzwave"
      traefik.docker.network: "automate"
      traefik.http.services.openzwave.loadbalancer.server.port: 7800
      traefik.http.routers.openzwave.entryPoints: "https"
    networks:
      automate:
    ports:
      - "127.0.0.1:1983:1983"
    security_opt:
      - seccomp:unconfined
    volumes:
      - "/srv/docker-apps/appdata/openzwave:/opt/ozw/config"

  apcupsd:
    container_name: apcupsd
    restart: "unless-stopped"
    image: "gersilex/apcupsd:latest"
    healthcheck:
      test: "/sbin/apcaccess status | grep -q 'STATUS *: ONLINE' || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
    devices:
      - "/dev/ups:/dev/usb/hiddev0"
    environment:
      TZ: "{{ timezone }}"
    expose:
      - 3551
    networks:
      ups:
    volumes:
      - "{{ docker_appdata_dir }}/apcupsd/apcupsd.conf:/etc/apcupsd/apcupsd.conf:ro"

  appdata-backup:
    container_name: appdata-backup
    image: "bcardiff/rclone:latest"
    restart: "always"
    environment:
      TZ: "{{ timezone }}"
      CRON: "0 5 * * * /config/backup_acl.sh && "
      CRON_ABORT: "0 6 * * *"
      SYNC_SRC: "/appdata"
      SYNC_DEST: "{{ rclone_gce_key }}:{{ gce_backup_bucket }}"
      SYNC_OPTS: "-v -x -L --filter-from /config/filters.txt"
    networks:
      backups:
    volumes:
      - "{{ docker_appdata_dir }}:/appdata"
      - "{{ docker_appdata_dir }}/appdata-backup:/config"
