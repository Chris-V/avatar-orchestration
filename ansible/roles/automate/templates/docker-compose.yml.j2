version: "3.7"

x-timezone: &timezone "{{ timezone }}"
x-proxy-enabled: &proxy-enabled
  traefik.enable: "true"
  traefik.docker.network: "public"

networks:
  public:
    driver: "bridge"
    name: "public"
    driver_opts:
      com.docker.network.bridge.name: "br-public"
    ipam:
      driver: "default"
      config:
        - subnet: "{{ docker_net_public }}"

  backups:
    driver: "bridge"
    name: "backups"
    driver_opts:
      com.docker.network.bridge.name: "br-backups"
    ipam:
      driver: "default"
      config:
        - subnet: "{{ docker_net_backups }}"

  glances:
    driver: "bridge"
    name: "glances"
    driver_opts:
      com.docker.network.bridge.name: "br-glances"
    ipam:
      driver: "default"
      config:
        - subnet: "{{ docker_net_glances }}"

  ups:
    driver: "bridge"
    name: "ups"
    driver_opts:
      com.docker.network.bridge.name: "br-ups"
    ipam:
      driver: "default"
      config:
        - subnet: "{{ docker_net_ups }}"

services:
  proxy:
    container_name: proxy
    image: "traefik:2.0.0-alpha7"
    restart: "unless-stopped"
    depends_on:
      - "proxy_error_pages"
    environment:
      TZ: *timezone
      GCE_SERVICE_ACCOUNT_FILE: "/etc/traefik/acme/gce_service_account.json"
    labels:
      <<: *proxy-enabled
      traefik.http.services.proxy.loadbalancer.server.port: 8080
      traefik.http.routers.proxy_http_internal.entryPoints: "http"
      traefik.http.routers.proxy_http_internal.rule: "Host(`traefik.{{ internal_hostname }}`)"
      traefik.http.routers.proxy_http_internal.middlewares: "common@file"
      traefik.http.routers.proxy_http_internal.service: "proxy"
      traefik.http.routers.proxy_http.entryPoints: "http"
      traefik.http.routers.proxy_http.rule: &traefik_router_rule "Host(`traefik-automate.{{ domain_name }}`)"
      traefik.http.routers.proxy_http.middlewares: "common@file, redirect-https@file"
      traefik.http.routers.proxy_https.entryPoints: "https"
      traefik.http.routers.proxy_https.rule: *traefik_router_rule
      traefik.http.routers.proxy_https.middlewares: "common@file, monitoring-auth@file"
      traefik.http.routers.proxy_https.service: "proxy"
      traefik.http.routers.proxy_https.tls: "true"
    extra_hosts:
      - "router:{{ router_ip }}"
    networks:
      glances:
      public:
        ipv4_address: "{{ docker_ip_proxy }}"
    ports:
      - "80:80"
      - "443:443"
      - "8883:8883"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ docker_appdata_dir }}/traefik/traefik.toml:/traefik.toml:ro"
      - "{{ docker_appdata_dir }}/traefik/traefik.d:/traefik.d:ro"
      - "{{ docker_appdata_dir }}/traefik/acme:/etc/traefik/acme"

  proxy_error_pages:
    container_name: proxy_error_pages
    image: "nginx:stable-alpine"
    restart: "unless-stopped"
    environment:
      TZ: *timezone
    labels:
      <<: *proxy-enabled
      traefik.http.services.error_pages.loadbalancer.server.port: 80
      traefik.http.routers.error_pages_http.entryPoints: "http"
      traefik.http.routers.error_pages_http.rule: &error_pages_router_rule "HostRegexp(`{catchall:.*}`)"
      traefik.http.routers.error_pages_http.priority: 1
      traefik.http.routers.error_pages_http.middlewares: "common@file, redirect-https@file"
      traefik.http.routers.error_pages_https.entryPoints: "https"
      traefik.http.routers.error_pages_https.rule: *error_pages_router_rule
      traefik.http.routers.error_pages_https.priority: 1
      traefik.http.routers.error_pages_https.middlewares: "common@file"
      traefik.http.routers.error_pages_https.service: "error_pages"
      traefik.http.routers.error_pages_https.tls: "true"
    networks:
      public:
    volumes:
      - "/srv/www/error_pages:/usr/share/nginx/html:ro"

  home-assistant:
    container_name: home-assistant
    image: "avatary/home-assistant:0.95.4"
    restart: "unless-stopped"
    depends_on:
      - "apcupsd"
      - "mosquitto"
    devices:
      - "/dev/zwave:/dev/zwave"
      - "/dev/zigbee:/dev/zigbee"
    environment:
      TZ: *timezone
      PUID: "{{ homeassistant_uid }}"
      PGID: "{{ homeassistant_gid }}"
    extra_hosts:
      - "tv-lr.devices.local:{{ living_room_tv_ip }}"
    labels:
      <<: *proxy-enabled
      traefik.http.services.home-assistant.loadbalancer.server.port: 8123
      traefik.http.routers.home-assistant_http.entryPoints: "http"
      traefik.http.routers.home-assistant_http.rule: &hass_router_rule "Host(`home-assistant.{{ domain_name }}`)"
      traefik.http.routers.home-assistant_http.middlewares: "common@file, redirect-https@file"
      traefik.http.routers.home-assistant_https.entryPoints: "https"
      traefik.http.routers.home-assistant_https.rule: *hass_router_rule
      traefik.http.routers.home-assistant_https.middlewares: "common@file"
      traefik.http.routers.home-assistant_https.service: "home-assistant"
      traefik.http.routers.home-assistant_https.tls: "true"
    networks:
      public:
      ups:
    volumes:
      - "{{ docker_appdata_dir }}/home-assistant/config:/config"
      - "{{ docker_appdata_dir }}/home-assistant/ssh:/home/hass/.ssh"

  glances:
    container_name: glances
    image: "nicolargo/glances:latest-alpine"
    pid: "host"
    restart: "unless-stopped"
    environment:
      TZ: *timezone
      GLANCES_OPT: -w
    labels:
      <<: *proxy-enabled
      traefik.docker.network: "glances"
      traefik.http.services.glances.loadbalancer.server.port: 61208
      traefik.http.routers.glances_http_internal.entryPoints: "http"
      traefik.http.routers.glances_http_internal.rule: "Host(`glances.{{ internal_hostname }}`)"
      traefik.http.routers.glances_http_internal.middlewares: "common@file"
      traefik.http.routers.glances_http_internal.service: "glances"
      traefik.http.routers.glances_http.entryPoints: "http"
      traefik.http.routers.glances_http.rule: &glances_router_rule "Host(`glances-automate.{{ domain_name }}`)"
      traefik.http.routers.glances_http.middlewares: "common@file, redirect-https@file"
      traefik.http.routers.glances_https.entryPoints: "https"
      traefik.http.routers.glances_https.rule: *glances_router_rule
      traefik.http.routers.glances_https.middlewares: "common@file, monitoring-auth@file"
      traefik.http.routers.glances_https.service: "glances"
      traefik.http.routers.glances_https.tls: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "1"
    networks:
      glances:
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  mosquitto:
    container_name: mosquitto
    image: "eclipse-mosquitto:latest"
    restart: "unless-stopped"
    environment:
      TZ: *timezone
    labels:
      <<: *proxy-enabled
      traefik.tcp.services.mosquitto.loadbalancer.server.port: 1883
      traefik.tcp.routers.mosquitto.entryPoints: "mqtts"
      traefik.tcp.routers.mosquitto.rule: "HostSNI(`mqtt.{{ domain_name }}`)"
      traefik.tcp.routers.mosquitto.service: "mosquitto"
      traefik.tcp.routers.mosquitto.tls: "true"
    networks:
      public:
    expose:
      - 1883
    volumes:
      - "{{ docker_appdata_dir }}/mosquitto/config:/mosquitto/config:ro"
      - "{{ docker_appdata_dir }}/mosquitto/data:/mosquitto/data"

  apcupsd:
    container_name: apcupsd
    restart: "unless-stopped"
    image: "gersilex/apcupsd:latest"
    healthcheck:
      test: "/sbin/apcaccess status | grep -q 'STATUS *: ONLINE' || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
    devices:
      - "/dev/ups:/dev/usb/hiddev0"
    environment:
      TZ: *timezone
    expose:
      - 3551
    networks:
      ups:
    volumes:
      - "{{ docker_appdata_dir }}/apcupsd/apcupsd.conf:/etc/apcupsd/apcupsd.conf:ro"

  appdata-backup:
    container_name: appdata-backup
    image: "bcardiff/rclone:latest"
    restart: "always"
    environment:
      TZ: *timezone
      CRON: "0 5 * * * /config/backup_acl.sh && "
      CRON_ABORT: "0 6 * * *"
      SYNC_SRC: "/appdata"
      SYNC_DEST: "{{ rclone_gce_key }}:{{ gce_backup_bucket }}"
      SYNC_OPTS: "-v -x -L --filter-from /config/filters.txt"
    networks:
      backups:
    volumes:
      - "{{ docker_appdata_dir }}:/appdata"
      - "{{ docker_appdata_dir }}/appdata-backup:/config"
