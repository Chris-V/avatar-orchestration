version: "3.7"

x-timezone: &timezone " {{ timezone }} "

x-proxy-enabled: &proxy-enabled
  traefik.enable: "true"

x-minecraft-rcon-port: &minecraft-rcon-port 25575
x-minecraft-rcon-password: &minecraft-rcon-password "{{ rcon_password }}"
x-minecraft-level-name: &minecraft-level-name "Ultimate"
x-minecraft-type: &minecraft-type "fabric"

networks:
  public:
    driver: "bridge"
    name: "public"
    driver_opts:
      com.docker.network.bridge.name: "br-public"
    ipam:
      driver: "default"
      config:
        - subnet: "{{ docker_net_public }}"

  glances:
    driver: "bridge"
    name: "glances"
    driver_opts:
      com.docker.network.bridge.name: "br-glances"
    ipam:
      driver: "default"
      config:
        - subnet: "{{ docker_net_glances }}"

  media:
    driver: "bridge"
    name: "media"
    driver_opts:
      com.docker.network.bridge.name: "br-media"
    ipam:
      driver: "default"
      config:
        - subnet: "{{ docker_net_media }}"

  minecraft:
    driver: "bridge"
    name: "minecraft"
    driver_opts:
      com.docker.network.bridge.name: "br-minecraft"
    ipam:
      driver: "default"
      config:
        - subnet: "{{ docker_net_minecraft }}"

services:
  proxy:
    container_name: "proxy"
    image: "traefik:2.1"
    restart: "unless-stopped"
    environment:
      TZ: *timezone
    labels:
      <<: *proxy-enabled
      traefik.http.routers.api.rule: "Host(`traefik.docker.localhost`, `traefik.{{ internal_hostname }}`)"
      traefik.http.routers.api.service: "api@internal"
    networks:
      public:
        ipv4_address: "{{ docker_ip_proxy }}"
      glances:
      media:
        aliases:
          - deluge.docker.localhost
          - jackett.docker.localhost
          - radarr.docker.localhost
          - sonarr.docker.localhost
          - plex.docker.localhost
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ docker_appdata_dir }}/traefik.toml:/traefik.toml:ro"

  glances:
    container_name: "glances"
    image: "nicolargo/glances:latest-alpine"
    pid: "host"
    restart: "unless-stopped"
    environment:
      TZ: *timezone
      GLANCES_OPT: -w
    labels:
      <<: *proxy-enabled
      traefik.docker.network: "glances"
      traefik.http.routers.glances.entryPoints: "http"
      traefik.http.routers.glances.rule: "Host(`glances.docker.localhost`, `glances.{{ internal_hostname }}`)"
      traefik.http.services.glances.loadbalancer.server.port: 61208
    networks:
      glances:
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  vpn:
    container_name: "vpn"
    image: "microbug/cryptostorm-client:latest"
    restart: "unless-stopped"
    cap_add:
      - NET_ADMIN
    environment:
      TZ: *timezone
      CRYPTOSTORM_USERNAME: "{{ cryptostorm_username }}"
      CRYPTOSTORM_CONFIG_FILE: "CA-Montreal_UDP.ovpn"
      CONNECTION_PORT: 443
      FORWARDING_PORT: {{ deluge_incoming_port }}
    networks:
      media:
      public:

  deluge:
    container_name: "deluge"
    image: "linuxserver/deluge:latest"
    network_mode: "service:vpn"
    restart: "unless-stopped"
    depends_on:
      - proxy
      - vpn
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_data_gid }}
      UMASK_SET: '022'
    labels:
      <<: *proxy-enabled
      traefik.http.routers.deluge.entryPoints: "http"
      traefik.http.routers.deluge.rule: "Host(`deluge.docker.localhost`, `deluge.{{ internal_hostname }}`)"
      traefik.http.services.deluge.loadbalancer.server.port: 8112
    volumes:
      - "{{ deluge_config_dir }}:/config"
      - "{{ downloads_dir }}:/downloads"

  jackett:
    container_name: "jackett"
    image: "linuxserver/jackett:latest"
    network_mode: "service:vpn"
    restart: "unless-stopped"
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_data_gid }}
    labels:
      <<: *proxy-enabled
      traefik.http.routers.jackett.entryPoints: "http"
      traefik.http.routers.jackett.rule: "Host(`jackett.docker.localhost`, `jackett.{{ internal_hostname }}`)"
      traefik.http.services.jackett.loadbalancer.server.port: 9117
    volumes:
      - "{{ jackett_config_dir }}:/config"
      - "{{ jackett_downloads_dir }}:/downloads"

  plex:
    container_name: "plex"
    image: "linuxserver/plex:latest"
    restart: "unless-stopped"
    devices:
      - "/dev/dri:/dev/dri"
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_media_gid }}
      VERSION: "docker"
    labels:
      <<: *proxy-enabled
      traefik.docker.network: "media"
      traefik.http.routers.plex.entryPoints: "http"
      traefik.http.routers.plex.rule: "Host(`plex.docker.localhost`, `plex.{{ internal_hostname }}`)"
      traefik.http.services.plex.loadbalancer.server.port: 32400
    networks:
      media:
        ipv4_address: "{{ docker_ip_plex }}"
    ports:
      - "32400:32400"
    volumes:
      - "{{ plex_config_dir }}:/config"
      - "{{ series_dir }}:/data/series:ro"
      - "{{ movies_dir }}:/data/movies:ro"
      - "{{ plex_transcode_dir }}:/transcode"

  sonarr:
    container_name: "sonarr"
    image: "linuxserver/sonarr:preview"
    restart: "unless-stopped"
    depends_on:
      - deluge
      - jackett
      - proxy
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_media_gid }}
    labels:
      <<: *proxy-enabled
      traefik.docker.network: "media"
      traefik.http.routers.sonarr.entryPoints: "http"
      traefik.http.routers.sonarr.rule: "Host(`sonarr.docker.localhost`, `sonarr.{{ internal_hostname }}`)"
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
    networks:
      media:
    volumes:
      - "{{ sonarr_config_dir }}:/config"
      - "{{ series_dir }}:/tv"
      - "{{ downloads_dir }}:/downloads:ro"

  radarr:
    container_name: "radarr"
    image: "linuxserver/radarr:latest"
    restart: "unless-stopped"
    depends_on:
      - deluge
      - jackett
      - proxy
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_media_gid }}
    labels:
      <<: *proxy-enabled
      traefik.docker.network: "media"
      traefik.http.routers.radarr.entryPoints: "http"
      traefik.http.routers.radarr.rule: "Host(`radarr.docker.localhost`, `radarr.{{ internal_hostname }}`)"
      traefik.http.services.radarr.loadbalancer.server.port: 7878
    networks:
      media:
    volumes:
      - "{{ radarr_config_dir }}:/config"
      - "{{ movies_dir }}:/movies"
      - "{{ downloads_dir }}:/downloads:ro"

  minecraft:
    container_name: "minecraft"
    image: "itzg/minecraft-server:latest"
    restart: "unless-stopped"
    user: "{{ system_appdata_uid }}:{{ system_appdata_gid }}"
    stdin_open: true
    tty: true
    environment:
      TZ: *timezone
      EULA: "TRUE"
      LEVEL: *minecraft-level-name
      SERVER_NAME: "Ultimate"
      MOTD: "The ultimate Minecraft server"
      ICON: "https://i.imgur.com/6VOFSL3.jpg"
      TYPE: *minecraft-type
      VERSION: "{{ minecraft_version }}"
      GUI: "false"
      MEMORY: "9G"
      JVM_OPTS: "-d64 -server"
      JVM_XX_OPTS: "-XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:+ParallelRefProcEnabled -XX:+UseLargePagesInMetaspace -XX:MaxGCPauseMillis=100 -XX:TargetSurvivorRatio=90 -XX:G1NewSizePercent=50 -XX:G1MaxNewSizePercent=80 -XX:G1MixedGCLiveThresholdPercent=35"
      MAX_PLAYERS: 6
      VIEW_DISTANCE: 12
      ENABLE_RCON: "true"
      RCON_PASSWORD: *minecraft-rcon-password
      RCON_PORT: *minecraft-rcon-port
      SNOOPER_ENABLED: "false"
      OPS: "{{ minecraft_username }}"
      WHITELIST: "{{ minecraft_username }}"
    networks:
      minecraft:
        ipv4_address: "{{ docker_ip_minecraft }}"
    ports:
      - "25565:25565"
    volumes:
      - "{{ minecraft_data_dir }}:/data"

  minecraft-map:
    container_name: "minecraft-map"
    image: "nginx:latest"
    restart: "unless-stopped"
    environment:
      TZ: *timezone
    labels:
      <<: *proxy-enabled
      traefik.http.routers.minecraft-map.entryPoints: "http"
      traefik.http.routers.minecraft-map.rule: "Host(`minecraft-map.docker.localhost`, `minecraft-map.{{ internal_hostname }}`)"
      traefik.http.services.minecraft-map.loadbalancer.server.port: 80
    networks:
      public:
    volumes:
      - "{{ minecraft_map_dir }}:/usr/share/nginx/html:ro"

  minecraft-backup:
    container_name: "minecraft-backup"
    image: "itzg/mc-backup:latest"
    restart: "always"
    environment:
      TZ: *timezone
      BACKUP_NAME: *minecraft-level-name
      LEVEL: *minecraft-level-name
      RCON_HOST: "minecraft"
      RCON_PASSWORD: *minecraft-rcon-password
      RCON_PORT: *minecraft-rcon-port
      TYPE: *minecraft-type
      BACKUP_INTERVAL: 1d
      INITIAL_DELAY: 12h
      PRUNE_BACKUPS_DAYS: 21
    networks:
      minecraft:
    volumes:
      - "{{ minecraft_data_dir }}:/data:ro"
      - "{{ minecraft_backups_dir }}:/backups"

  appdata-backup:
    container_name: "appdata-backup"
    build:
      context: "{{ docker_srv_dir }}/docker-images/docker-volumes-backup"
      network: "host"
    image: "avatary/docker-volumes-backup"
    network_mode: "none"
    restart: "always"
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_appdata_gid }}
      CRONTAB_CONFIG: "30 3 * * *"
      PAUSE_CONTAINERS: "deluge jackett plex radarr sonarr"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ docker_appdata_dir }}/appdata-backup:/config:ro"
      - "{{ docker_appdata_dir }}:/data:ro"
      - "{{ appdata_backups_dir }}:/backups"
