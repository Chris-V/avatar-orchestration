version: "3.7"

x-timezone: &timezone " {{ timezone }} "

x-proxy-enabled: &proxy-enabled
  traefik.enable: "true"
  traefik.docker.network: "public"

x-minecraft-rcon-port: &minecraft-rcon-port 25575
x-minecraft-rcon-password: &minecraft-rcon-password "{{ rcon_password }}"
x-minecraft-level-name: &minecraft-level-name "Ultimate"
x-minecraft-type: &minecraft-type "vanilla"
x-minecraft-version: &minecraft-version "{{ minecraft_version }}"

networks:
  public:
  glances:
  media:
  minecraft:

services:
  proxy:
    container_name: proxy
    image: "traefik:alpine"
    restart: unless-stopped
    environment:
      TZ: *timezone
    labels:
      <<: *proxy-enabled
      traefik.proxy.backend: proxy
      traefik.proxy.port: 8080
      traefik.proxy.frontend.rule: "Host:traefik.{{ internal_hostname }}"
    networks:
      public:
      glances:
      media:
        aliases:
          - deluge.docker.localhost
          - jackett.docker.localhost
          - radarr.docker.localhost
          - sonarr.docker.localhost
          - plex.docker.localhost
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ docker_appdata_dir }}/traefik.toml:/traefik.toml:ro"

  glances:
    container_name: glances
    image: "nicolargo/glances:latest-alpine"
    pid: host
    restart: unless-stopped
    environment:
      TZ: *timezone
      GLANCES_OPT: -w
    labels:
      <<: *proxy-enabled
      traefik.glances.backend: glances
      traefik.glances.port: 61208
      traefik.glances.frontend.rule: "Host:glances.{{ internal_hostname }}"
    networks:
      glances:
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ docker_appdata_dir }}/glances.conf:/glances/conf/glances.conf:ro"

  vpn:
    container_name: vpn
    image: "microbug/cryptostorm-client:latest"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    environment:
      TZ: *timezone
      CRYPTOSTORM_USERNAME: "{{ cryptostorm_username }}"
      CRYPTOSTORM_CONFIG_FILE: "CA-Montreal_UDP.ovpn"
      CONNECTION_PORT: 443
      FORWARDING_PORT: {{ deluge_incoming_port }}
    networks:
      media:

  deluge:
    container_name: deluge
    image: "linuxserver/deluge:latest"
    network_mode: "service:vpn"
    restart: unless-stopped
    depends_on:
      - proxy
      - vpn
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_data_gid }}
      UMASK_SET: '022'
    labels:
      <<: *proxy-enabled
      traefik.deluge.backend: vpn
      traefik.deluge.port: 8112
      traefik.deluge.frontend.rule: "Host:deluge.docker.localhost,deluge.{{ internal_hostname }}"
    volumes:
      - "{{ deluge_config_dir }}:/config"
      - "{{ downloads_dir }}:/downloads"

  plex:
    container_name: plex
    image: "linuxserver/plex:latest"
    restart: unless-stopped
    devices:
      - "/dev/dri:/dev/dri"
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_media_gid }}
      VERSION: docker
    labels:
      <<: *proxy-enabled
      traefik.plex.backend: plex
      traefik.plex.port: 32400
      traefik.plex.frontend.rule: "Host:plex.docker.localhost,plex.{{ internal_hostname }}"
    networks:
      media:
    ports:
      - "32400:32400"
    volumes:
      - "{{ plex_config_dir }}:/config"
      - "{{ series_dir }}:/data/series:ro"
      - "{{ movies_dir }}:/data/movies:ro"
      - "{{ plex_transcode_dir }}:/transcode"

  jackett:
    container_name: jackett
    image: "linuxserver/jackett:latest"
    restart: unless-stopped
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_data_gid }}
    labels:
      <<: *proxy-enabled
      traefik.jackett.backend: jackett
      traefik.jackett.port: 9117
      traefik.jackett.frontend.rule: "Host:jackett.docker.localhost,jackett.{{ internal_hostname }}"
    networks:
      media:
    volumes:
      - "{{ jackett_config_dir }}:/config"
      - "{{ jackett_downloads_dir }}:/downloads"

  sonarr:
    container_name: sonarr
    image: "linuxserver/sonarr:preview"
    restart: unless-stopped
    depends_on:
      - deluge
      - jackett
      - proxy
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_media_gid }}
    labels:
      <<: *proxy-enabled
      traefik.sonarr.backend: sonarr
      traefik.sonarr.port: 8989
      traefik.sonarr.frontend.rule: "Host:sonarr.docker.localhost,sonarr.{{ internal_hostname }}"
    networks:
      media:
    volumes:
      - "{{ sonarr_config_dir }}:/config"
      - "{{ series_dir }}:/tv"
      - "{{ downloads_dir }}:/downloads:ro"

  radarr:
    container_name: radarr
    image: "linuxserver/radarr:latest"
    restart: unless-stopped
    depends_on:
      - deluge
      - jackett
      - proxy
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_media_gid }}
    labels:
      <<: *proxy-enabled
      traefik.radarr.backend: radarr
      traefik.radarr.port: 7878
      traefik.radarr.frontend.rule: "Host:radarr.docker.localhost,radarr.{{ internal_hostname }}"
    networks:
      media:
    volumes:
      - "{{ radarr_config_dir }}:/config"
      - "{{ movies_dir }}:/movies"
      - "{{ downloads_dir }}:/downloads:ro"

  minecraft:
    container_name: minecraft
    image: "itzg/minecraft-server"
    restart: "unless-stopped"
    user: "{{ system_appdata_uid }}:{{ system_appdata_gid }}"
    environment:
      TZ: *timezone
      EULA: "TRUE"
      LEVEL: *minecraft-level-name
      SERVER_NAME: "Ultimate"
      MOTD: "The ultimate Minecraft server"
      ICON: "https://i.imgur.com/6VOFSL3.jpg"
      TYPE: *minecraft-type
      VERSION: *minecraft-version
      GUI: "false"
      MEMORY: "9G"
      JVM_OPTS: "-server"
      JVM_XX_OPTS: "-XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:+ParallelRefProcEnabled -XX:+UseLargePagesInMetaspace -XX:MaxGCPauseMillis=100 -XX:TargetSurvivorRatio=90 -XX:G1NewSizePercent=50 -XX:G1MaxNewSizePercent=80 -XX:G1MixedGCLiveThresholdPercent=35"
      MAX_PLAYERS: 6
      VIEW_DISTANCE: 12
      ENABLE_RCON: "true"
      RCON_PASSWORD: *minecraft-rcon-password
      RCON_PORT: *minecraft-rcon-port
      SNOOPER_ENABLED: "false"
      OPS: "{{ minecraft_username }}"
      WHITELIST: "{{ minecraft_username }}"
    networks:
      public:
      minecraft:
    ports:
      - "25565:25565"
    volumes:
      - "{{ minecraft_data_dir }}:/data"

  minecraft-map:
    container_name: minecraft-map
    image: "nginx:stable-alpine"
    restart: "unless-stopped"
    environment:
      TZ: *timezone
    labels:
      <<: *proxy-enabled
      traefik.glances.backend: minecraft-map
      traefik.glances.port: 80
      traefik.glances.frontend.rule: "Host:minecraft-map.{{ internal_hostname }}"
    networks:
      public:
    volumes:
      - "{{ minecraft_map_dir }}:/usr/share/nginx/html:ro"

  minecraft-backup:
    container_name: minecraft-backup
    image: "itzg/mc-backup"
    restart: "always"
    user: "{{ system_appdata_uid }}:{{ system_appdata_gid }}"
    environment:
      TZ: *timezone
      BACKUP_NAME: *minecraft-level-name
      LEVEL: *minecraft-level-name
      RCON_HOST: "minecraft"
      RCON_PASSWORD: *minecraft-rcon-password
      RCON_PORT: *minecraft-rcon-port
      TYPE: *minecraft-type
      INITIAL_DELAY: 43200
      INTERVAL_SEC: 86400
      PRUNE_BACKUPS_DAYS: 7
    networks:
      minecraft:
    volumes:
      - "{{ minecraft_data_dir }}:/data:ro"
      - "{{ minecraft_backups_dir }}:/backups"

  backup-scheduler:
    container_name: backup-scheduler
    build:
      context: "{{ docker_srv_dir }}/docker-images/backup-scheduler"
    image: "avatary/backup-scheduler"
    network_mode: "none"
    restart: "always"
    environment:
      TZ: *timezone
      PUID: {{ system_appdata_uid }}
      PGID: {{ system_appdata_gid }}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ docker_appdata_dir }}/backup-scheduler:/config:ro"
      - "{{ docker_appdata_dir }}:/appdata:ro"
      - "{{ backups_dir }}:/backups"
