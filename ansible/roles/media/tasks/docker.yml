- name: "Migrate docker-apps directory"
  ansible.builtin.command: 'mv "/srv/docker" "{{ docker_apps_dir }}"'
  notify: "cleanup"
  args:
    creates: "{{ docker_apps_dir }}"

- name: "Create docker directories"
  loop:
    - { path: "{{ docker_apps_dir }}" }
    - { path: "{{ docker_apps_dir }}/fragments" }
    - { path: "{{ docker_appdata_dir }}" }
    - { path: "{{ docker_apps_dir }}/jobs" }
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "directory"
    owner: "root"
    group: "docker"
    mode: 0770

- name: "Create network fragments"
  loop:
    - { name: "public", subnet: "{{ docker_net_public }}" }
    - { name: "glances", subnet: "{{ docker_net_glances }}" }
    - { name: "media", subnet: "{{ docker_net_media }}" }
    - { name: "minecraft", subnet: "{{ docker_net_minecraft }}" }
  include_role:
    name: "app"
    tasks_from: "network-fragment"
  vars:
    dest: "{{ docker_apps_dir }}/fragments/{{ item.name }}.network.yml"
    fragment:
      name: "{{ item.name }}"
      definition:
        driver: "bridge"
        ipam:
          driver: "default"
          config:
            - subnet: "{{ item.subnet }}"

- name: "LEGACY: Create data directories"
  loop:
    - { path: "{{ backups_dir }}" }
    - { path: "{{ appdata_backups_dir }}" }
    - { path: "{{ minecraft_backups_dir }}" }
    - { path: "{{ series_dir }}", group: "media", mode: "ug=rwx,o=rx" }
    - { path: "{{ movies_dir }}", group: "media", mode: "ug=rwx,o=rx" }
    - { path: "{{ downloads_dir }}", group: "data", mode: "ug=rwx,o=rx" }
    - { path: "{{ deluge_completed_dir }}", group: "data", mode: "ug=rwx,o=rx" }
    - { path: "{{ deluge_downloads_dir }}", group: "data", mode: "ug=rwx,o=rx" }
    - { path: "{{ jackett_downloads_dir }}", group: "data", mode: "ug=rwx,o=rx" }
    - { path: "{{ minecraft_data_dir }}" }
    - { path: "{{ minecraft_map_dir }}", group: "data", mode: "ug=rwx,o=rx" }
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "directory"
    recurse: no
    owner: "docker-appdata"
    group: "{{ item.group | default('docker-appdata', true) }}"
    mode: "{{ item.mode | default('ug=rwx,o=', true) }}"

- name: "Deluge"
  include_role:
    name: "app.deluge"
  vars:
    dest: "{{ docker_apps_dir }}/fragments/deluge.service.yml"
    validate: false
    fragment_definition:
      depends_on:
        - "vpn"
      labels:
        avatar.subdomain: "deluge"
      network_mode: "service:vpn"
    deluge:
      config_dir: "{{ deluge_config_dir }}"
      downloads_dir: "{{ downloads_dir }}"
      gid: "{{ system_data_gid }}"
      uid: "{{ system_appdata_uid }}"

- name: "Glances"
  include_role:
    name: "app.glances"
  vars:
    config_dir: "{{ docker_appdata_dir }}/glances"
    dest: "{{ docker_apps_dir }}/fragments/glances.service.yml"
    fragment_definition:
      labels:
        avatar.subdomain: "glances"
        traefik.docker.network: "glances"
      networks:
        glances: {}

- name: "Jellyfin"
  include_role:
    name: "app.jellyfin"
  vars:
    dest: "{{ docker_apps_dir }}/fragments/jellyfin.service.yml"
    fragment_definition:
      labels:
        avatar.subdomain: "jellyfin"
        traefik.docker.network: "media"
      networks:
        media: {}
    jellyfin:
      config_dir: "{{ jellyfin_config_dir }}"
      transcode_dir: "{{ jellyfin_transcode_dir }}"
      series_dir: "{{ series_dir }}"
      movies_dir: "{{ movies_dir }}"
      gid: "{{ system_appdata_gid }}"
      uid: "{{ system_appdata_uid }}"

- name: "Radarr"
  include_role:
    name: "app.radarr"
  vars:
    dest: "{{ docker_apps_dir }}/fragments/radarr.service.yml"
    fragment_definition:
      labels:
        avatar.subdomain: "radarr"
        traefik.docker.network: "media"
      networks:
        media: {}
    radarr:
      config_dir: "{{ radarr_config_dir }}"
      downloads_dir: "{{ downloads_dir }}"
      movies_dir: "{{ movies_dir }}"
      gid: "{{ media_group.gid }}"
      uid: "{{ system_appdata_uid }}"

- name: "Sonarr"
  include_role:
    name: "app.sonarr"
  vars:
    dest: "{{ docker_apps_dir }}/fragments/sonarr.service.yml"
    fragment_definition:
      labels:
        avatar.subdomain: "sonarr"
        traefik.docker.network: "media"
      networks:
        media: {}
    sonarr:
      config_dir: "{{ sonarr_config_dir }}"
      downloads_dir: "{{ downloads_dir }}"
      series_dir: "{{ series_dir }}"
      gid: "{{ media_group.gid }}"
      uid: "{{ system_appdata_uid }}"

- name: "Traefik"
  include_role:
    name: "app.traefik"
  vars:
    config_dir: "{{ docker_appdata_dir }}/traefik"
    dest: "{{ docker_apps_dir }}/fragments/traefik.service.yml"
    fragment_definition:
      labels:
        avatar.subdomain: "traefik"
      networks:
        public:
          ipv4_address: "{{ docker_ip_proxy }}"
        glances: {}
        media: {}
    traefik:
      domain: "{{ internal_hostname }}"
      trusted_ips: "{{ network.servers.automate.ip }}/32"

- name: "Jackett"
  include_role:
    name: "app.jackett"
  vars:
    dest: "{{ docker_apps_dir }}/fragments/jackett.service.yml"
    validate: false
    fragment_definition:
      depends_on:
        - "vpn"
      labels:
        avatar.subdomain: "jackett"
      network_mode: "service:vpn"
    jackett:
      config_dir: "{{ jackett_config_dir }}"
      downloads_dir: "{{ jackett_downloads_dir }}"
      gid: "{{ system_data_gid }}"
      uid: "{{ system_appdata_uid }}"

- name: "VPN"
  include_role:
    name: "app.vpn"
  vars:
    dest: "{{ docker_apps_dir }}/fragments/vpn.service.yml"
    fragment_definition:
      networks:
        media: {}
        public: {}
    vpn:
      config_file: "CA-Montreal_UDP.ovpn"
      forwarding_port: "{{ deluge_incoming_port }}"
      username: "{{ cryptostorm_username }}"

- name: "LEGACY: Copy docker images"
  ansible.builtin.copy:
    src: "docker-images"
    dest: "{{ docker_apps_dir }}"
    owner: "root"
    group: "docker"
    directory_mode: "ug=rwx,o="
    mode: "ug+rw,o=" # Preserve exec. bit where applicable

- name: "LEGACY: Copy god docker compose fragment"
  loop:
    - { path: "fragments/docker-compose.yml" }
    - { path: "jobs/docker-compose.yml" }
  ansible.builtin.template:
    src: "docker/{{ item.path }}.j2"
    dest: "{{ docker_apps_dir }}/{{ item.path }}"
    owner: "root"
    group: "docker"
    mode: "ug=rw,o="

- name: "Create docker-compose.yml"
  include_role:
    name: "app"
    tasks_from: "merge-fragments"
  vars:
    src: "{{ docker_apps_dir }}/fragments/"
    dest: "{{ docker_apps_dir }}/docker-compose.yml"

- name: "LEGACY: Copy initial app configs"
  ansible.builtin.unarchive:
    creates: "{{ docker_appdata_dir }}"
    src: "{{ appdata_archive }}"
    dest: "{{ docker_apps_dir }}"

- name: "LEGACY: Copy managed app configs"
  ansible.builtin.copy:
    src: "appdata/"
    dest: "{{ docker_appdata_dir }}"
    owner: "docker-appdata"
    group: "docker-appdata"
    directory_mode: "u=rwx,g=rx,o="
    mode: "u+rw,g+r-w,o=" # Preserve exec. bit where applicable
