- name: Install docker packages
  community.general.pacman:
    name:
      - docker
      - docker-compose
    state: "present"

- name: Configure docker service
  block:
    - name: Create systemd docker config directory
      ansible.builtin.file:
        state: "directory"
        path: "/etc/systemd/system/docker.service.d"
        owner: "root"
        group: "root"
        mode: 0755
    - name: Copy docker service unit overrides
      notify:
        - reload systemd
        - restart docker
      ansible.builtin.template:
        src: "etc/systemd/system/docker.service.d/10-args.conf.j2"
        dest: "/etc/systemd/system/docker.service.d/10-args.conf"
        owner: "root"
        group: "docker"
        mode: 0644

- name: Enable Docker
  ansible.builtin.systemd:
    name: "docker.service"
    state: "started"
    enabled: yes

- name: Create docker directories
  loop:
    - "{{ docker_srv_dir }}"
    - "{{ docker_srv_dir }}/jobs"
  ansible.builtin.file:
    path: "{{ item }}"
    state: "directory"
    owner: "root"
    group: "docker"
    mode: "ug=rwX,o="

- name: Create data directories
  loop:
    - { path: "{{ backups_dir }}" }
    - { path: "{{ appdata_backups_dir }}" }
    - { path: "{{ minecraft_backups_dir }}" }
    - { path: "{{ series_dir }}", group: "media", mode: "ug=rwx,o=rx" }
    - { path: "{{ movies_dir }}", group: "media", mode: "ug=rwx,o=rx" }
    - { path: "{{ downloads_dir }}", group: "data", mode: "ug=rwx,o=rx" }
    - { path: "{{ deluge_completed_dir }}", group: "data", mode: "ug=rwx,o=rx" }
    - { path: "{{ deluge_downloads_dir }}", group: "data", mode: "ug=rwx,o=rx" }
    - { path: "{{ jackett_downloads_dir }}", group: "data", mode: "ug=rwx,o=rx" }
    - { path: "{{ jellyfin_config_dir }}", mode: "u=rwx,g=rx,o=" }
    - { path: "{{ jellyfin_transcode_dir }}" }
    - { path: "{{ minecraft_data_dir }}" }
    - { path: "{{ minecraft_map_dir }}", group: "data", mode: "ug=rwx,o=rx" }
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "directory"
    recurse: no
    owner: "docker-appdata"
    group: "{{ item.group | default('docker-appdata', true) }}"
    mode: "{{ item.mode | default('ug=rwx,o=', true) }}"

- name: Copy docker images
  ansible.builtin.copy:
    src: "docker-images"
    dest: "{{ docker_srv_dir }}"
    owner: "root"
    group: "docker"
    directory_mode: "ug=rwx,o="
    mode: "ug+rw,o=" # Preserve exec. bit where applicable

- name: Copy docker compose
  loop:
    - { path: "docker-compose.yml" }
    - { path: "jobs/docker-compose.yml" }
  ansible.builtin.template:
    src: "docker/{{ item.path }}.j2"
    dest: "{{ docker_srv_dir }}/{{ item.path }}"
    owner: "root"
    group: "docker"
    mode: "ug=rw,o="
    validate: "docker-compose -f %s config"

- name: Copy initial app configs
  ansible.builtin.unarchive:
    creates: "{{ docker_appdata_dir }}"
    src: "{{ appdata_archive }}"
    dest: "{{ docker_srv_dir }}"

- name: Copy managed app configs
  ansible.builtin.copy:
    src: "appdata/"
    dest: "{{ docker_appdata_dir }}"
    owner: "docker-appdata"
    group: "docker-appdata"
    directory_mode: "u=rwx,g=rx,o="
    mode: "u+rw,g+r-w,o=" # Preserve exec. bit where applicable

- name: Populate managed app configs
  loop:
    - { filename: "traefik.toml" }
  ansible.builtin.template:
    src: "appdata/{{ item.filename }}.j2"
    dest: "{{ docker_appdata_dir }}/{{ item.filename }}"
    owner: "docker-appdata"
    group: "docker-appdata"
    mode: "u=rw,g=r,o="

- name: Cleanup old files
  loop:
    - { path: "{{ docker_appdata_dir }}/plex" }
    - { path: "{{ data_mount }}/plex" }
  ansible.builtin.file:
    state: "absent"
    path: "{{ item.path }}"
